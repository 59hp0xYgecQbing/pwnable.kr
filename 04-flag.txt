"""
Papa brought me a packed present! let's open it.

Download : http://pwnable.kr/bin/flag

This is reversing task. all you need is binary
"""

# I have to say that I didn't have a lot of experience of bianry or reverse
# so here is what I have just searched for

1.  Check the format of file:
        file flag
    
    Then we got the basic info about this file:
        flag: ELF 64-bit LSB executable, x86-64, version 1 (GNU/Linux), statically linked, stripped

2.  Then use strings command:
        strings flag | less
    
    The result shows like this:
        UPX!
        @/x8
        gX lw_
        H/\_@
                Kl$
        H9\$(t
        []]y
        ...
        ...
        ;dl]tpR
        c3Rh
        2B)=    
        1\a}
        _M]h
        Upbrk
        makBN
        su`"]R
        UPX!
        UPX!
        (END)

    Notice the token 'UPX!'
    Basically, UPX shows that this executables is compressed, so now decompress flag:
        upx -d flag

    Then strings again:
        strings -20 flag | less
    (-20: at least 20 Bytes one-line)

    The result shows like this:
        UPX...? sounds like a delivery service :)
        I will malloc() and strcpy the flag there. take it.
        FATAL: kernel too old
        FATAL: cannot determine kernel version
        cannot set %fs base address for thread-local storage
        unexpected reloc type in static binary
        ======= Backtrace: =========
        ======= Memory map: ========
        (p->prev_size == offset)
        malloc: top chunk is corrupt
    
    Luckily enough, the first line seems much like the flag.
    Try it and we've done.

3.  When we use IDA to reverse this flag(after upx -d flag first),
    in main func, we will see this:

 rodata:0000000000496620 ; Segment type: Pure data
.rodata:0000000000496620 ; Segment permissions: Read
.rodata:0000000000496620 ; Segment alignment '32byte' can not be represented in assembly
.rodata:0000000000496620 _rodata         segment para public 'CONST' use64
.rodata:0000000000496620                 assume cs:_rodata
.rodata:0000000000496620                 ;org 496620h
.rodata:0000000000496620                 public _IO_stdin_used
.rodata:0000000000496620 _IO_stdin_used  db    1
.rodata:0000000000496621                 db    0
.rodata:0000000000496622                 db    2
.rodata:0000000000496623                 db    0
.rodata:0000000000496624                 db    0
.rodata:0000000000496625                 db    0
.rodata:0000000000496626                 db    0
.rodata:0000000000496627                 db    0
.rodata:0000000000496628 aUpxSoundsLikeA db 'UPX...? sounds like a delivery service :)',0
.rodata:0000000000496628                                         ; DATA XREF: .data:flag↓o
.rodata:0000000000496652                 align 8
.rodata:0000000000496658 aIWillMallocAnd db 'I will malloc() and strcpy the flag there. take it.',0
.rodata:0000000000496658                                         ; DATA XREF: main+8↑o

    Notice the aUpxSoundsLikeA should be the flag.
    (I'm not quite sure if there will be any sign related to flag in CTF.)

PS:
1.  When using strings after decompressed flag, if the number of least-bytes is too large,
    the first line shown above will not appear. 
    (I'll check some webpages for any possible reasons or explanations);
    
   
If anything wrong with this idea, or there is any other method, or anything else(such as my poor english):
please contact me: songdy0x0tter@gmail.com
I'll appreciate it very much if anyone find any fault in these writeup. Thx.